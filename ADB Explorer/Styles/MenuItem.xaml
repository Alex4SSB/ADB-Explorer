<!--  Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License. See LICENSE in the project root for license information.  -->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:helpers="clr-namespace:ADB_Explorer.Helpers"
    xmlns:models="clr-namespace:ADB_Explorer.Models"
    xmlns:ui="http://schemas.modernwpf.com/2019">

    <Thickness x:Key="MenuFlyoutScrollerMargin">0,4,0,4</Thickness>
    <KeyTime x:Key="AnimationDurationKeyTime">00:00:00.2</KeyTime>

    <Style x:Key="MenuBorderStyle" TargetType="Border">
        <Setter Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource AncestorType=MenuItem, Mode=FindAncestor}, Path=(ui:ControlHelper.CornerRadius)}" />
    </Style>

    <!--  Template copied from ModernWPF to be modified  -->

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelItemTemplateKey}" TargetType="MenuItem">
        <ControlTemplate.Resources>
            <RotateTransform x:Key="RotatingTransform" />
            <TranslateTransform x:Key="BounceTransform" X="0" Y="0" />
            <Storyboard x:Key="BouncingStoryBoard">
                <DoubleAnimation
                    AutoReverse="True"
                    Storyboard.TargetName="ContentPresenter"
                    Storyboard.TargetProperty="RenderTransform.Y"
                    From="0"
                    To="-4"
                    Duration="00:00:00.1">
                    <DoubleAnimation.EasingFunction>
                        <BounceEase
                            Bounces="2"
                            Bounciness="4"
                            EasingMode="EaseOut" />
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
            </Storyboard>
            <Storyboard x:Key="CwRotatingStoryBoard">
                <DoubleAnimation
                    Storyboard.TargetName="ContentPresenter"
                    Storyboard.TargetProperty="RenderTransform.Angle"
                    From="0"
                    To="360"
                    Duration="00:00:00.2" />
            </Storyboard>
            <Storyboard x:Key="CCwRotatingStoryBoard">
                <DoubleAnimation
                    Storyboard.TargetName="ContentPresenter"
                    Storyboard.TargetProperty="RenderTransform.Angle"
                    From="360"
                    To="0"
                    Duration="00:00:00.2" />
            </Storyboard>
            <Storyboard x:Key="LeftMarqueeStoryBoard">
                <DoubleAnimation
                    Storyboard.TargetName="ContentPresenter"
                    Storyboard.TargetProperty="RenderTransform.X"
                    From="0"
                    To="-30"
                    Duration="00:00:00.1" />
                <DoubleAnimation
                    BeginTime="00:00:00.1"
                    Storyboard.TargetName="ContentPresenter"
                    Storyboard.TargetProperty="RenderTransform.X"
                    From="30"
                    To="0"
                    Duration="00:00:00.1">
                    <DoubleAnimation.EasingFunction>
                        <BounceEase
                            Bounces="2"
                            Bounciness="4"
                            EasingMode="EaseOut" />
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
            </Storyboard>
            <Storyboard x:Key="RightMarqueeStoryBoard">
                <DoubleAnimation
                    Storyboard.TargetName="ContentPresenter"
                    Storyboard.TargetProperty="RenderTransform.X"
                    From="0"
                    To="30"
                    Duration="00:00:00.1" />
                <DoubleAnimation
                    BeginTime="00:00:00.1"
                    Storyboard.TargetName="ContentPresenter"
                    Storyboard.TargetProperty="RenderTransform.X"
                    From="-30"
                    To="0"
                    Duration="00:00:00.1">
                    <DoubleAnimation.EasingFunction>
                        <BounceEase
                            Bounces="2"
                            Bounciness="4"
                            EasingMode="EaseOut" />
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
            </Storyboard>
            <Storyboard x:Key="UpMarqueeStoryBoard">
                <DoubleAnimation
                    Storyboard.TargetName="ContentPresenter"
                    Storyboard.TargetProperty="RenderTransform.Y"
                    From="0"
                    To="-30"
                    Duration="00:00:00.1" />
                <DoubleAnimation
                    BeginTime="00:00:00.1"
                    Storyboard.TargetName="ContentPresenter"
                    Storyboard.TargetProperty="RenderTransform.Y"
                    From="30"
                    To="0"
                    Duration="00:00:00.1">
                    <DoubleAnimation.EasingFunction>
                        <BounceEase
                            Bounces="2"
                            Bounciness="4"
                            EasingMode="EaseOut" />
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
            </Storyboard>
            <Storyboard x:Key="DownMarqueeStoryBoard">
                <DoubleAnimation
                    Storyboard.TargetName="ContentPresenter"
                    Storyboard.TargetProperty="RenderTransform.Y"
                    From="0"
                    To="30"
                    Duration="00:00:00.1" />
                <DoubleAnimation
                    BeginTime="00:00:00.1"
                    Storyboard.TargetName="ContentPresenter"
                    Storyboard.TargetProperty="RenderTransform.Y"
                    From="-30"
                    To="0"
                    Duration="00:00:00.1">
                    <DoubleAnimation.EasingFunction>
                        <BounceEase
                            Bounces="2"
                            Bounciness="4"
                            EasingMode="EaseOut" />
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid
            x:Name="ContentRoot"
            ClipToBounds="True"
            SnapsToDevicePixels="True">
            <Border
                x:Name="Background"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Style="{StaticResource MenuBorderStyle}" />
            <ContentPresenter
                x:Name="ContentPresenter"
                Margin="{TemplateBinding Padding}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                ContentSource="Header"
                RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <!--  Click animation  -->
            <EventTrigger RoutedEvent="MenuItem.Click">
                <BeginStoryboard>
                    <Storyboard>
                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(helpers:StyleHelper.BeginAnimation)">
                            <DiscreteBooleanKeyFrame KeyTime="00:00:00" Value="True" />
                            <DiscreteBooleanKeyFrame KeyTime="{StaticResource AnimationDurationKeyTime}" Value="False" />
                        </BooleanAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Source={x:Static Member=models:Data.Settings}, Path=IsAnimated}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(helpers:StyleHelper.BeginAnimation)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="helpers:StyleHelper.ActivateAnimation" Value="True" />
            </MultiDataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="helpers:StyleHelper.ActivateAnimation" Value="True" />
                    <Condition Property="helpers:StyleHelper.ContentAnimation" Value="Bounce" />
                    <Condition Property="helpers:StyleHelper.UseFluentStyles" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ContentPresenter" Property="RenderTransform" Value="{StaticResource BounceTransform}" />
                <MultiTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource BouncingStoryBoard}" />
                </MultiTrigger.EnterActions>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="helpers:StyleHelper.ActivateAnimation" Value="True" />
                    <Condition Property="helpers:StyleHelper.ContentAnimation" Value="RotateCW" />
                    <Condition Property="helpers:StyleHelper.UseFluentStyles" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ContentPresenter" Property="RenderTransform" Value="{StaticResource RotatingTransform}" />
                <Setter TargetName="ContentPresenter" Property="RenderTransformOrigin" Value="0.5, 0.5" />
                <MultiTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CwRotatingStoryBoard}" />
                </MultiTrigger.EnterActions>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="helpers:StyleHelper.ActivateAnimation" Value="True" />
                    <Condition Property="helpers:StyleHelper.ContentAnimation" Value="RotateCCW" />
                    <Condition Property="helpers:StyleHelper.UseFluentStyles" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ContentPresenter" Property="RenderTransform" Value="{StaticResource RotatingTransform}" />
                <Setter TargetName="ContentPresenter" Property="RenderTransformOrigin" Value="0.5, 0.5" />
                <MultiTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CCwRotatingStoryBoard}" />
                </MultiTrigger.EnterActions>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="helpers:StyleHelper.ActivateAnimation" Value="True" />
                    <Condition Property="helpers:StyleHelper.ContentAnimation" Value="LeftMarquee" />
                    <Condition Property="helpers:StyleHelper.UseFluentStyles" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ContentPresenter" Property="RenderTransform" Value="{StaticResource BounceTransform}" />
                <MultiTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource LeftMarqueeStoryBoard}" />
                </MultiTrigger.EnterActions>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="helpers:StyleHelper.ActivateAnimation" Value="True" />
                    <Condition Property="helpers:StyleHelper.ContentAnimation" Value="RightMarquee" />
                    <Condition Property="helpers:StyleHelper.UseFluentStyles" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ContentPresenter" Property="RenderTransform" Value="{StaticResource BounceTransform}" />
                <MultiTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource RightMarqueeStoryBoard}" />
                </MultiTrigger.EnterActions>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="helpers:StyleHelper.ActivateAnimation" Value="True" />
                    <Condition Property="helpers:StyleHelper.ContentAnimation" Value="UpMarquee" />
                    <Condition Property="helpers:StyleHelper.UseFluentStyles" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ContentPresenter" Property="RenderTransform" Value="{StaticResource BounceTransform}" />
                <MultiTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource UpMarqueeStoryBoard}" />
                </MultiTrigger.EnterActions>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="helpers:StyleHelper.ActivateAnimation" Value="True" />
                    <Condition Property="helpers:StyleHelper.ContentAnimation" Value="DownMarquee" />
                    <Condition Property="helpers:StyleHelper.UseFluentStyles" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ContentPresenter" Property="RenderTransform" Value="{StaticResource BounceTransform}" />
                <MultiTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource DownMarqueeStoryBoard}" />
                </MultiTrigger.EnterActions>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Background" Property="Background" Value="{DynamicResource MenuBarItemBackgroundPointerOver}" />
                <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrushPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Background" Property="Background" Value="{DynamicResource MenuBarItemBackgroundPressed}" />
                <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrushPressed}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelHeaderTemplateKey}" TargetType="MenuItem">
        <Grid
            x:Name="ContentRoot"
            Background="{TemplateBinding Background}"
            SnapsToDevicePixels="True">
            <Border
                x:Name="Background"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Style="{StaticResource MenuBorderStyle}" />

            <ContentPresenter
                x:Name="ContentPresenter"
                Margin="{TemplateBinding Padding}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                ContentSource="Header"
                RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

            <ui:MenuPopup
                x:Name="PART_Popup"
                AllowsTransparency="true"
                Focusable="false"
                IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                <ui:ThemeShadowChrome CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=MenuItem, Mode=FindAncestor}, Path=(ui:ControlHelper.CornerRadius)}" IsShadowEnabled="{DynamicResource {x:Static SystemParameters.DropShadowKey}}">
                    <Border
                        x:Name="SubMenuRoot"
                        Background="{DynamicResource MenuFlyoutPresenterBackground}"
                        Style="{StaticResource MenuBorderStyle}">
                        <Grid>
                            <ScrollViewer
                                x:Name="SubMenuScrollViewer"
                                MinWidth="{DynamicResource FlyoutThemeMinWidth}"
                                Margin="{DynamicResource MenuFlyoutPresenterThemePadding}"
                                Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                              TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <ItemsPresenter
                                    Margin="{StaticResource MenuFlyoutScrollerMargin}"
                                    Grid.IsSharedSizeScope="true"
                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                    KeyboardNavigation.TabNavigation="Cycle"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ScrollViewer>
                            <Border
                                x:Name="SubMenuBorder"
                                BorderBrush="{DynamicResource MenuFlyoutPresenterBorderBrush}"
                                BorderThickness="{DynamicResource MenuFlyoutPresenterBorderThemeThickness}"
                                Style="{StaticResource MenuBorderStyle}" />
                        </Grid>
                    </Border>
                </ui:ThemeShadowChrome>
            </ui:MenuPopup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsSuspendingAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Background" Property="Background" Value="{DynamicResource MenuBarItemBackgroundPointerOver}" />
                <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrushPointerOver}" />
            </Trigger>
            <!--  Selected  -->
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="Background" Property="Background" Value="{DynamicResource MenuBarItemBackgroundSelected}" />
                <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrushSelected}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Background" Property="Background" Value="{DynamicResource MenuBarItemBackgroundPressed}" />
                <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrushPressed}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuItemTemplateKey}" TargetType="MenuItem">
        <ControlTemplate.Resources>
            <StreamGeometry x:Key="CheckMark">F1 M 17.939453 5.439453 L 7.5 15.888672 L 2.060547 10.439453 L 2.939453 9.560547 L 7.5 14.111328 L 17.060547 4.560547 Z</StreamGeometry>
        </ControlTemplate.Resources>
        <Border
            x:Name="LayoutRoot"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="true"
            Style="{StaticResource MenuBorderStyle}">
            <Grid x:Name="AnimationRoot">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="{TemplateBinding Visibility, Converter={StaticResource SharedSizeGroupConverter}, ConverterParameter=MenuItemCheckColumnGroup}" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="{TemplateBinding Visibility, Converter={StaticResource SharedSizeGroupConverter}, ConverterParameter=MenuItemIconColumnGroup}" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <ui:FontIconFallback
                    x:Name="CheckGlyph"
                    Width="16"
                    Margin="0,0,12,0"
                    Data="{StaticResource CheckMark}"
                    FontFamily="{DynamicResource SymbolThemeFontFamily}"
                    FontSize="16"
                    Foreground="{DynamicResource ToggleMenuFlyoutItemCheckGlyphForeground}"
                    Opacity="0"
                    Visibility="Collapsed" />
                <Viewbox
                    x:Name="IconRoot"
                    Grid.Column="1"
                    Width="16"
                    Height="16"
                    Margin="0,0,12,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center">
                    <ContentPresenter
                        x:Name="IconContent"
                        ContentSource="Icon"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Viewbox>
                <ContentPresenter
                    x:Name="ContentPresenter"
                    Grid.Column="2"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    ContentSource="Header"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    TextElement.Foreground="{TemplateBinding Foreground}" />
                <TextBlock
                    x:Name="KeyboardAcceleratorTextBlock"
                    Grid.Column="3"
                    Margin="24,0,0,0"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Foreground="{DynamicResource MenuFlyoutItemKeyboardAcceleratorTextForeground}"
                    Style="{StaticResource CaptionTextBlockStyle}"
                    Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="IconRoot" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="InputGestureText" Value="">
                <Setter TargetName="KeyboardAcceleratorTextBlock" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="CheckGlyph" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutItemRevealBackgroundPointerOver}" />
                <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutItemRevealBorderBrushPointerOver}" />
                <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundPointerOver}" />
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundPointerOver}" />
                <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource ToggleMenuFlyoutItemCheckGlyphForegroundPointerOver}" />
                <Setter TargetName="KeyboardAcceleratorTextBlock" Property="Foreground" Value="{DynamicResource MenuFlyoutItemKeyboardAcceleratorTextForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutItemRevealBackgroundPressed}" />
                <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutItemRevealBorderBrushPressed}" />
                <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundPressed}" />
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundPressed}" />
                <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource ToggleMenuFlyoutItemCheckGlyphForegroundPressed}" />
                <Setter TargetName="KeyboardAcceleratorTextBlock" Property="Foreground" Value="{DynamicResource MenuFlyoutItemKeyboardAcceleratorTextForegroundPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutItemBackgroundDisabled}" />
                <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutItemRevealBorderBrushDisabled}" />
                <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundDisabled}" />
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutItemForegroundDisabled}" />
                <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource ToggleMenuFlyoutItemCheckGlyphForegroundDisabled}" />
                <Setter TargetName="KeyboardAcceleratorTextBlock" Property="Foreground" Value="{DynamicResource MenuFlyoutItemKeyboardAcceleratorTextForegroundDisabled}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuHeaderTemplateKey}" TargetType="MenuItem">
        <ControlTemplate.Resources>
            <StreamGeometry x:Key="ChevronRight">M 5.029297 19.091797 L 14.111328 10 L 5.029297 0.908203 L 5.908203 0.029297 L 15.888672 10 L 5.908203 19.970703 Z</StreamGeometry>
        </ControlTemplate.Resources>
        <Border
            x:Name="LayoutRoot"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="True"
            Style="{StaticResource MenuBorderStyle}">
            <Grid x:Name="AnimationRoot">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemCheckColumnGroup" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Viewbox
                    x:Name="IconRoot"
                    Grid.Column="1"
                    Width="16"
                    Height="16"
                    Margin="0,0,12,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center">
                    <ContentPresenter
                        x:Name="IconContent"
                        ContentSource="Icon"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Viewbox>
                <ContentPresenter
                    x:Name="ContentPresenter"
                    Grid.Column="2"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    ContentSource="Header"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    TextElement.Foreground="{TemplateBinding Foreground}" />
                <ui:FontIconFallback
                    x:Name="SubItemChevron"
                    Grid.Column="3"
                    Margin="{DynamicResource MenuFlyoutItemChevronMargin}"
                    Data="{StaticResource ChevronRight}"
                    FontFamily="{DynamicResource SymbolThemeFontFamily}"
                    FontSize="12"
                    Foreground="{DynamicResource MenuFlyoutSubItemChevron}">
                    <UIElement.RenderTransform>
                        <TranslateTransform Y="1" />
                    </UIElement.RenderTransform>
                </ui:FontIconFallback>
                <Popup
                    x:Name="PART_Popup"
                    AllowsTransparency="true"
                    Focusable="false"
                    IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Right"
                    PlacementTarget="{Binding ElementName=LayoutRoot}"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                    <Popup.PlacementRectangle>
                        <MultiBinding>
                            <MultiBinding.Converter>
                                <ui:PlacementRectangleConverter Margin="4,-1" />
                            </MultiBinding.Converter>
                            <Binding ElementName="LayoutRoot" Path="ActualWidth" />
                            <Binding ElementName="LayoutRoot" Path="ActualHeight" />
                        </MultiBinding>
                    </Popup.PlacementRectangle>
                    <ui:ThemeShadowChrome CornerRadius="5" IsShadowEnabled="{DynamicResource {x:Static SystemParameters.DropShadowKey}}">
                        <Border
                            x:Name="SubMenuRoot"
                            Background="{DynamicResource MenuFlyoutPresenterBackground}"
                            CornerRadius="5"
                            Style="{StaticResource MenuBorderStyle}">
                            <Grid>
                                <ScrollViewer
                                    x:Name="SubMenuScrollViewer"
                                    MinWidth="{DynamicResource FlyoutThemeMinWidth}"
                                    Margin="{DynamicResource MenuFlyoutPresenterThemePadding}"
                                    Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                  TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <ItemsPresenter
                                        Margin="{StaticResource MenuFlyoutScrollerMargin}"
                                        Grid.IsSharedSizeScope="true"
                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                        KeyboardNavigation.TabNavigation="Cycle"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                                <Border
                                    x:Name="SubMenuBorder"
                                    BorderBrush="{DynamicResource MenuFlyoutPresenterBorderBrush}"
                                    BorderThickness="{DynamicResource MenuFlyoutPresenterBorderThemeThickness}"
                                    Style="{StaticResource MenuBorderStyle}" />
                            </Grid>
                        </Border>
                    </ui:ThemeShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="IconRoot" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutSubItemRevealBackgroundPointerOver}" />
                <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutSubItemRevealBorderBrushPointerOver}" />
                <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundPointerOver}" />
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundPointerOver}" />
                <Setter TargetName="SubItemChevron" Property="Foreground" Value="{DynamicResource MenuFlyoutSubItemChevronPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutSubItemRevealBackgroundPressed}" />
                <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutSubItemRevealBorderBrushPressed}" />
                <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundPressed}" />
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundPressed}" />
                <Setter TargetName="SubItemChevron" Property="Foreground" Value="{DynamicResource MenuFlyoutSubItemChevronPressed}" />
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutSubItemRevealBackgroundSubMenuOpened}" />
                <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutSubItemRevealBorderBrushSubMenuOpened}" />
                <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundSubMenuOpened}" />
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundSubMenuOpened}" />
                <Setter TargetName="SubItemChevron" Property="Foreground" Value="{DynamicResource MenuFlyoutSubItemChevronSubMenuOpened}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="LayoutRoot" Property="Background" Value="{DynamicResource MenuFlyoutSubItemRevealBackgroundDisabled}" />
                <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource MenuFlyoutSubItemRevealBorderBrushDisabled}" />
                <Setter TargetName="IconContent" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundDisabled}" />
                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource MenuFlyoutSubItemForegroundDisabled}" />
                <Setter TargetName="SubItemChevron" Property="Foreground" Value="{DynamicResource MenuFlyoutSubItemChevronDisabled}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style
        x:Key="AdbMenuItemStyle"
        BasedOn="{StaticResource DefaultMenuItemStyle}"
        TargetType="MenuItem">
        <Setter Property="Background" Value="{DynamicResource MenuFlyoutItemRevealBackground}" />
        <Setter Property="helpers:StyleHelper.UseFluentStyles" Value="{Binding Source={x:Static Member=models:Data.Settings}, Path=UseFluentStyles}" />
        <Setter Property="helpers:StyleHelper.ContentAnimation" Value="None" />
        <Setter Property="helpers:StyleHelper.BeginAnimation" Value="False" />
        <Setter Property="BorderBrush" Value="{DynamicResource MenuFlyoutItemRevealBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource MenuFlyoutItemRevealBorderThickness}" />
        <Setter Property="Foreground" Value="{DynamicResource MenuFlyoutItemForeground}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuItemTemplateKey}}" />
        <Setter Property="Padding" Value="12,0" />
        <Setter Property="ui:ControlHelper.CornerRadius" Value="0" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Background" Value="{DynamicResource MenuBarItemBackground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrush}" />
                <Setter Property="BorderThickness" Value="{DynamicResource MenuBarItemBorderThickness}" />
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelHeaderTemplateKey}}" />
                <Setter Property="IsTabStop" Value="True" />
                <Setter Property="Height" Value="{StaticResource MenuBarHeight}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Background" Value="{DynamicResource MenuBarItemBackground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource MenuBarItemBorderBrush}" />
                <Setter Property="BorderThickness" Value="{DynamicResource MenuBarItemBorderThickness}" />
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelItemTemplateKey}}" />
                <Setter Property="IsTabStop" Value="True" />
                <Setter Property="Height" Value="{StaticResource MenuBarHeight}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="10,4,10,5" />
                <Setter Property="Background" Value="{DynamicResource MenuFlyoutSubItemRevealBackground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource MenuFlyoutSubItemRevealBorderBrush}" />
                <Setter Property="BorderThickness" Value="{DynamicResource MenuFlyoutSubItemRevealBorderThickness}" />
                <Setter Property="Foreground" Value="{DynamicResource MenuFlyoutSubItemForeground}" />
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="10,4,10,5" />
            </Trigger>
            <Trigger Property="helpers:StyleHelper.UseFluentStyles" Value="True">
                <Setter Property="ui:ControlHelper.CornerRadius" Value="5" />
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualRoundedStyle}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="SubmenuHeader" />
                    <Condition Property="helpers:StyleHelper.UseFluentStyles" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="ui:ControlHelper.CornerRadius" Value="4" />
                <Setter Property="Margin" Value="5,1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="SubmenuItem" />
                    <Condition Property="helpers:StyleHelper.UseFluentStyles" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="ui:ControlHelper.CornerRadius" Value="4" />
                <Setter Property="Margin" Value="5,1" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="PathButtonStyle"
        BasedOn="{StaticResource AdbMenuItemStyle}"
        TargetType="MenuItem">
        <Style.Triggers>
            <Trigger Property="helpers:StyleHelper.UseFluentStyles" Value="True">
                <Setter Property="ui:ControlHelper.CornerRadius" Value="3" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource AdbMenuItemStyle}" TargetType="MenuItem" />

</ResourceDictionary>
